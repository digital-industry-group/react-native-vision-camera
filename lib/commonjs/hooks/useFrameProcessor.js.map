{"version":3,"names":["capturableConsole","console","useFrameProcessor","frameProcessor","dependencies","useCallback","frame","global","didSetConsole","debug","__callAsync","log","warn","error","info","_setGlobalConsole"],"sources":["useFrameProcessor.ts"],"sourcesContent":["/* global _setGlobalConsole */\n\nimport { DependencyList, useCallback } from 'react';\nimport type { Frame } from '../Frame';\n\ntype FrameProcessor = (frame: Frame) => void;\n\nconst capturableConsole = console;\n\n/**\n * Returns a memoized Frame Processor function wich you can pass to the `<Camera>`. (See [\"Frame Processors\"](https://mrousavy.github.io/react-native-vision-camera/docs/guides/frame-processors))\n *\n * Make sure to add the `'worklet'` directive to the top of the Frame Processor function, otherwise it will not get compiled into a worklet.\n *\n * @param frameProcessor The Frame Processor\n * @param dependencies The React dependencies which will be copied into the VisionCamera JS-Runtime.\n * @returns The memoized Frame Processor.\n * @example\n * ```ts\n * const frameProcessor = useFrameProcessor((frame) => {\n *   'worklet'\n *   const qrCodes = scanQRCodes(frame)\n *   console.log(`QR Codes: ${qrCodes}`)\n * }, [])\n * ```\n */\nexport function useFrameProcessor(frameProcessor: FrameProcessor, dependencies: DependencyList): FrameProcessor {\n  return useCallback((frame: Frame) => {\n    'worklet';\n\n    // @ts-expect-error\n    if (global.didSetConsole == null || global.didSetConsole === false) {\n      const console = {\n        // @ts-expect-error __callAsync is injected by native REA\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        debug: capturableConsole.debug.__callAsync,\n        // @ts-expect-error __callAsync is injected by native REA\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        log: capturableConsole.log.__callAsync,\n        // @ts-expect-error __callAsync is injected by native REA\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        warn: capturableConsole.warn.__callAsync,\n        // @ts-expect-error __callAsync is injected by native REA\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        error: capturableConsole.error.__callAsync,\n        // @ts-expect-error __callAsync is injected by native REA\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        info: capturableConsole.info.__callAsync,\n      };\n      // @ts-expect-error _setGlobalConsole is set by RuntimeDecorator::decorateRuntime\n      _setGlobalConsole(console);\n      // @ts-expect-error\n      global.didSetConsole = true;\n    }\n\n    frameProcessor(frame);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n}\n"],"mappings":";;;;;;;AAEA;;AAFA;AAOA,MAAMA,iBAAiB,GAAGC,OAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,iBAAT,CAA2BC,cAA3B,EAA2DC,YAA3D,EAAyG;EAC9G,OAAO,IAAAC,kBAAA,EAAaC,KAAD,IAAkB;IACnC,UADmC,CAGnC;;IACA,IAAIC,MAAM,CAACC,aAAP,IAAwB,IAAxB,IAAgCD,MAAM,CAACC,aAAP,KAAyB,KAA7D,EAAoE;MAClE,MAAMP,OAAO,GAAG;QACd;QACA;QACAQ,KAAK,EAAET,iBAAiB,CAACS,KAAlB,CAAwBC,WAHjB;QAId;QACA;QACAC,GAAG,EAAEX,iBAAiB,CAACW,GAAlB,CAAsBD,WANb;QAOd;QACA;QACAE,IAAI,EAAEZ,iBAAiB,CAACY,IAAlB,CAAuBF,WATf;QAUd;QACA;QACAG,KAAK,EAAEb,iBAAiB,CAACa,KAAlB,CAAwBH,WAZjB;QAad;QACA;QACAI,IAAI,EAAEd,iBAAiB,CAACc,IAAlB,CAAuBJ;MAff,CAAhB,CADkE,CAkBlE;;MACAK,iBAAiB,CAACd,OAAD,CAAjB,CAnBkE,CAoBlE;;;MACAM,MAAM,CAACC,aAAP,GAAuB,IAAvB;IACD;;IAEDL,cAAc,CAACG,KAAD,CAAd,CA5BmC,CA6BnC;EACD,CA9BM,EA8BJF,YA9BI,CAAP;AA+BD"}